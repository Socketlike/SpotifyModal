/* eslint-disable @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any */

export interface FadeAnimations {
  _: { display: string; fadein: Animation; fadeout: Animation };
  fadein: () => void;
  fadeout: () => void;
}

export interface FluxDispatcher {
  _subscriptions: {
    [name: string]: Set<(...args: any) => unknown>;
  };
  subscribe: (name: string, callbackFn: (...args: any) => unknown) => void;
  unsubscribe: (name: string, callbackFn: (...args: any) => unknown) => void;
}

export interface SpotifySocket {
  accountId: string;
  accessToken: string;
  backoff: {
    jitter: boolean;
    max: number;
    min: number;
    _callback: (...args: unknown[]) => unknown;
    _current: number;
    _fails: number;
    current: number;
    fails: number;
    pending: number;
  };
  connectionId: string;
  handleDeviceStateChange: (...args: unknown[]) => unknown;
  isPremium: boolean;
  pingInterval: {
    _ref: number;
  };
  socket: WebSocket;
  _requestedConnect: boolean;
  _requestedDisconnect: boolean;
  connected: boolean;
}

export interface SpotifyUser {
  external_urls: {
    spotify: string;
  };
  href: string;
  id: string;
  name: string;
  type: string;
  uri: string;
}

export interface SpotifyAlbum {
  album_type: 'single' | 'album';
  artists: SpotifyUser[];
  available_markets: string[];
  external_urls: {
    spotify: string;
  };
  href: string;
  id: string;
  images: Array<{
    height: null | number;
    url: string;
    width: null | number;
  }>;
  name: string;
  release_date: null | string;
  release_date_precision: null | string;
  total_tracks: number;
  type: string;
  uri: string;
}

export interface SpotifyTrack {
  album: null | SpotifyAlbum;
  artists: SpotifyUser[];
  available_markets: string[];
  disc_number: number;
  duration_ms: number;
  episode: boolean;
  explicit: boolean;
  external_ids: null | {
    isrc: string;
  };
  external_urls: null | {
    spotify: string;
  };
  href: string;
  id: string;
  is_local: boolean;
  name: string;
  popularity: number;
  preview_url: null | string;
  track: boolean;
  track_number: number;
  type: string;
  uri: string;
}

export type SpotifyStateContext = null | {
  collaborative: boolean;
  description: string;
  external_urls: {
    spotify: string;
  };
  followers: {
    href: null;
    total: number;
  };
  href: string;
  id: string;
  images: Array<{
    height: number | null;
    url: string;
    width: number | null;
  }>;
  name: string;
  owner: SpotifyUser;
  primary_color: null;
  public: boolean;
  snapshot_id: string;
  tracks: {
    href: string;
    items: Array<{
      added_at: string;
      added_by: SpotifyUser;
      is_local: boolean;
      primary_color: null;
      track: SpotifyTrack;
      video_thumbnail: {
        uri: string | null;
      };
    }>;
  };
  type: string;
  uri: string;
};

export interface SpotifyDevice {
  id: string;
  is_active: boolean;
  is_private_session: boolean;
  is_restricted: boolean;
  name: string;
  type: 'Computer' | 'Smartphone' | 'Speaker';
  volume_percent: number;
}

export interface SpotifyFluxDispatcherState {
  accountId: string;
  context: SpotifyStateContext;
  device: SpotifyDevice;
  isPlaying: boolean;
  position: boolean;
  repeat: boolean;
  track: {
    album: {
      id: string;
      image: {
        height: number;
        url: string;
        width: number;
      };
      name: string;
    };
    artists: SpotifyUser[];
    duration: number;
    id: string;
    isLocal: boolean;
    name: string;
  };
  type: 'SPOTIFY_PLAYER_STATE';
  volumePercent: number;
}

export interface SpotifyWebSocketState {
  actions: {
    disallows: Record<string, boolean>;
  };
  context: SpotifyStateContext;
  currently_playing_type: string;
  device: SpotifyDevice;
  is_playing: boolean;
  item: SpotifyTrack;
  progress_ms: number;
  repeat_state: 'off' | 'context' | 'track';
  shuffle_state: boolean;
  timestamp: number;
}

export interface SpotifyWebSocketRawMessage {
  data: string;
}

export interface SpotifyWebSocketRawParsedMessage {
  payloads:
    | undefined
    | Array<{
        events: Array<{
          event: {
            state: undefined | SpotifyWebSocketState;
            devices: undefined | SpotifyWebSocketDevices;
          };
          type: 'PLAYER_STATE_CHANGED' | 'DEVICE_STATE_CHANGED';
        }>;
      }>;
  type: undefined | 'message' | 'pong';
}

export type SpotifyWebSocketDevices = SpotifyDevice[];

export interface SpotifySocketModule {
  getActiveSocketAndDevice: () =>
    | undefined
    | {
        socket: SpotifySocket;
        device: SpotifyDevice;
      };
  __getLocalVars: () => {
    AUTO_PAUSE_TIMEOUT: 30000;
    DEVICE_STATE_CHANGE_THROTTLE: 3000;
    MAXIMUM_ARTISTS: 5;
    MAXIMUM_BACKOFF: 30000;
    MAXIMUM_START_TIME_DIFFERENCE: 1500;
    PING_INTERVAL: 30000;
    PLATFORM: {
      color: 'var(--spotify)';
      enabled: boolean;
      getPlatformUserUrl: (...args: unknown[]) => unknown;
      icon: {
        darkPNG: string;
        darkSVG: string;
        lightPNG: string;
        lightSVG: string;
        whitePNG: string;
        whiteSVG: string;
      };
      name: 'Spotify';
      type: 'Spotify';
    };
    RICH_PRESENCE_MAX_LENGTH: 128;
    SPEAKING_AUTO_PAUSE_GAP_TIMEOUT: 100;
    SPOTIFY_CONNECTION_URI_PREFIX: 'hm://pusher/v1/connections/';
    SPOTIFY_DEVICE_COMPUTER_TYPE: 'Computer';
    SPOTIFY_SOCKET_URL_PREFIX: 'wss://dealer.spotify.com/?access_token=';
    SYNCING_HOST_TIMEOUT: 300000;
    SpotifyAlbumTypes: {
      SINGLE: 'single';
    };
    SpotifyDataTypes: {
      MESSAGE: 'message';
      PING: 'ping';
      PONG: 'pong';
    };
    SpotifyEventTypes: {
      PLAYER_STATE_CHANGED: 'PLAYER_STATE_CHANGED';
      DEVICE_STATE_CHANGED: 'DEVICE_STATE_CHANGED';
    };
    TRACK_UPDATE_TIMEOUT: 5000;
    accounts: Record<string, SpotifySocket>;
    lastPlayedTrackId: string | undefined;
    logger: {
      error: (...data: unknown[]) => void;
      info: (...data: unknown[]) => void;
      log: (...data: unknown[]) => void;
      name: 'Spotify';
      time: (...data: unknown[]) => void;
      trace: (...data: unknown[]) => void;
      verbose: (...data: unknown[]) => void;
      warn: (...data: unknown[]) => void;
    };
    pinnedState: SpotifyFluxDispatcherState | undefined;
    playerDevices: Record<string, SpotifyDevice[]>;
    playerStates: Record<string, SpotifyFluxDispatcherState | null>;
    speakingAutoPause: Record<string, never>;
    speakingAutoPauseGap: {
      _ref: null;
    };
    store: SpotifySocketModule;
    streamingAutoPause: null;
    syncingHostTimeout: Record<string, never>;
    syncingWith: undefined;
    trackSyncUpdateTimeout: Record<string, never>;
    trackUpdateTimeout: {
      _ref: null;
    };
    wasAutoPaused: boolean;
  };
}

export interface CSSStyleProperties {
  alignContent?: string;
  alignItems?: string;
  alignSelf?: string;
  alignmentBaseline?: string;
  all?: string;
  animation?: string;
  animationDelay?: string;
  animationDirection?: string;
  animationDuration?: string;
  animationFillMode?: string;
  animationIterationCount?: string;
  animationName?: string;
  animationPlayState?: string;
  animationTimingFunction?: string;
  appearance?: string;
  ascentOverride?: string;
  backdropFilter?: string;
  backfaceVisibility?: string;
  background?: string;
  backgroundAttachment?: string;
  backgroundBlendMode?: string;
  backgroundClip?: string;
  backgroundColor?: string;
  backgroundImage?: string;
  backgroundOrigin?: string;
  backgroundPosition?: string;
  backgroundPositionX?: string;
  backgroundPositionY?: string;
  backgroundRepeat?: string;
  backgroundRepeatX?: string;
  backgroundRepeatY?: string;
  backgroundSize?: string;
  baselineShift?: string;
  blockSize?: string;
  border?: string;
  borderBlock?: string;
  borderBlockColor?: string;
  borderBlockEnd?: string;
  borderBlockEndColor?: string;
  borderBlockEndStyle?: string;
  borderBlockEndWidth?: string;
  borderBlockStart?: string;
  borderBlockStartColor?: string;
  borderBlockStartStyle?: string;
  borderBlockStartWidth?: string;
  borderBlockStyle?: string;
  borderBlockWidth?: string;
  borderBottom?: string;
  borderBottomColor?: string;
  borderBottomLeftRadius?: string;
  borderBottomRightRadius?: string;
  borderBottomStyle?: string;
  borderBottomWidth?: string;
  borderCollapse?: string;
  borderColor?: string;
  borderImage?: string;
  borderImageOutset?: string;
  borderImageRepeat?: string;
  borderImageSlice?: string;
  borderImageSource?: string;
  borderImageWidth?: string;
  borderInline?: string;
  borderInlineColor?: string;
  borderInlineEnd?: string;
  borderInlineEndColor?: string;
  borderInlineEndStyle?: string;
  borderInlineEndWidth?: string;
  borderInlineStart?: string;
  borderInlineStartColor?: string;
  borderInlineStartStyle?: string;
  borderInlineStartWidth?: string;
  borderInlineStyle?: string;
  borderInlineWidth?: string;
  borderLeft?: string;
  borderLeftColor?: string;
  borderLeftStyle?: string;
  borderLeftWidth?: string;
  borderRadius?: string;
  borderRight?: string;
  borderRightColor?: string;
  borderRightStyle?: string;
  borderRightWidth?: string;
  borderSpacing?: string;
  borderStyle?: string;
  borderTop?: string;
  borderTopColor?: string;
  borderTopLeftRadius?: string;
  borderTopRightRadius?: string;
  borderTopStyle?: string;
  borderTopWidth?: string;
  borderWidth?: string;
  bottom?: string;
  boxShadow?: string;
  boxSizing?: string;
  breakAfter?: string;
  breakBefore?: string;
  breakInside?: string;
  bufferedRendering?: string;
  captionSide?: string;
  caretColor?: string;
  clear?: string;
  clip?: string;
  clipPath?: string;
  clipRule?: string;
  color?: string;
  colorInterpolation?: string;
  colorInterpolationFilters?: string;
  colorRendering?: string;
  colorScheme?: string;
  columnCount?: string;
  columnFill?: string;
  columnGap?: string;
  columnRule?: string;
  columnRuleColor?: string;
  columnRuleStyle?: string;
  columnRuleWidth?: string;
  columnSpan?: string;
  columnWidth?: string;
  columns?: string;
  contain?: string;
  containIntrinsicSize?: string;
  content?: string;
  contentVisibility?: string;
  counterIncrement?: string;
  counterReset?: string;
  counterSet?: string;
  cssFloat?: string;
  cssText?: string;
  cursor?: string;
  cx?: string;
  cy?: string;
  d?: string;
  descentOverride?: string;
  direction?: string;
  display?: string;
  dominantBaseline?: string;
  emptyCells?: string;
  fill?: string;
  fillOpacity?: string;
  fillRule?: string;
  filter?: string;
  flex?: string;
  flexBasis?: string;
  flexDirection?: string;
  flexFlow?: string;
  flexGrow?: string;
  flexShrink?: string;
  flexWrap?: string;
  float?: string;
  floodColor?: string;
  floodOpacity?: string;
  font?: string;
  fontDisplay?: string;
  fontFamily?: string;
  fontFeatureSettings?: string;
  fontKerning?: string;
  fontOpticalSizing?: string;
  fontSize?: string;
  fontStretch?: string;
  fontStyle?: string;
  fontVariant?: string;
  fontVariantCaps?: string;
  fontVariantEastAsian?: string;
  fontVariantLigatures?: string;
  fontVariantNumeric?: string;
  fontVariationSettings?: string;
  fontWeight?: string;
  gap?: string;
  grid?: string;
  gridArea?: string;
  gridAutoColumns?: string;
  gridAutoFlow?: string;
  gridAutoRows?: string;
  gridColumn?: string;
  gridColumnEnd?: string;
  gridColumnGap?: string;
  gridColumnStart?: string;
  gridGap?: string;
  gridRow?: string;
  gridRowEnd?: string;
  gridRowGap?: string;
  gridRowStart?: string;
  gridTemplate?: string;
  gridTemplateAreas?: string;
  gridTemplateColumns?: string;
  gridTemplateRows?: string;
  height?: string;
  hyphens?: string;
  imageOrientation?: string;
  imageRendering?: string;
  inherits?: string;
  initialValue?: string;
  inlineSize?: string;
  inset?: string;
  insetBlock?: string;
  insetBlockEnd?: string;
  insetBlockStart?: string;
  insetInline?: string;
  insetInlineEnd?: string;
  insetInlineStart?: string;
  isolation?: string;
  justifyContent?: string;
  justifyItems?: string;
  justifySelf?: string;
  left?: string;
  length?: 0;
  letterSpacing?: string;
  lightingColor?: string;
  lineBreak?: string;
  lineGapOverride?: string;
  lineHeight?: string;
  listStyle?: string;
  listStyleImage?: string;
  listStylePosition?: string;
  listStyleType?: string;
  margin?: string;
  marginBlock?: string;
  marginBlockEnd?: string;
  marginBlockStart?: string;
  marginBottom?: string;
  marginInline?: string;
  marginInlineEnd?: string;
  marginInlineStart?: string;
  marginLeft?: string;
  marginRight?: string;
  marginTop?: string;
  marker?: string;
  markerEnd?: string;
  markerMid?: string;
  markerStart?: string;
  mask?: string;
  maskType?: string;
  maxBlockSize?: string;
  maxHeight?: string;
  maxInlineSize?: string;
  maxWidth?: string;
  maxZoom?: string;
  minBlockSize?: string;
  minHeight?: string;
  minInlineSize?: string;
  minWidth?: string;
  minZoom?: string;
  mixBlendMode?: string;
  objectFit?: string;
  objectPosition?: string;
  offset?: string;
  offsetDistance?: string;
  offsetPath?: string;
  offsetRotate?: string;
  opacity?: string;
  order?: string;
  orientation?: string;
  orphans?: string;
  outline?: string;
  outlineColor?: string;
  outlineOffset?: string;
  outlineStyle?: string;
  outlineWidth?: string;
  overflow?: string;
  overflowAnchor?: string;
  overflowWrap?: string;
  overflowX?: string;
  overflowY?: string;
  overscrollBehavior?: string;
  overscrollBehaviorBlock?: string;
  overscrollBehaviorInline?: string;
  overscrollBehaviorX?: string;
  overscrollBehaviorY?: string;
  padding?: string;
  paddingBlock?: string;
  paddingBlockEnd?: string;
  paddingBlockStart?: string;
  paddingBottom?: string;
  paddingInline?: string;
  paddingInlineEnd?: string;
  paddingInlineStart?: string;
  paddingLeft?: string;
  paddingRight?: string;
  paddingTop?: string;
  page?: string;
  pageBreakAfter?: string;
  pageBreakBefore?: string;
  pageBreakInside?: string;
  pageOrientation?: string;
  paintOrder?: string;
  parentRule?: null;
  perspective?: string;
  perspectiveOrigin?: string;
  placeContent?: string;
  placeItems?: string;
  placeSelf?: string;
  pointerEvents?: string;
  position?: string;
  quotes?: string;
  r?: string;
  resize?: string;
  right?: string;
  rowGap?: string;
  rubyPosition?: string;
  rx?: string;
  ry?: string;
  scrollBehavior?: string;
  scrollMargin?: string;
  scrollMarginBlock?: string;
  scrollMarginBlockEnd?: string;
  scrollMarginBlockStart?: string;
  scrollMarginBottom?: string;
  scrollMarginInline?: string;
  scrollMarginInlineEnd?: string;
  scrollMarginInlineStart?: string;
  scrollMarginLeft?: string;
  scrollMarginRight?: string;
  scrollMarginTop?: string;
  scrollPadding?: string;
  scrollPaddingBlock?: string;
  scrollPaddingBlockEnd?: string;
  scrollPaddingBlockStart?: string;
  scrollPaddingBottom?: string;
  scrollPaddingInline?: string;
  scrollPaddingInlineEnd?: string;
  scrollPaddingInlineStart?: string;
  scrollPaddingLeft?: string;
  scrollPaddingRight?: string;
  scrollPaddingTop?: string;
  scrollSnapAlign?: string;
  scrollSnapStop?: string;
  scrollSnapType?: string;
  shapeImageThreshold?: string;
  shapeMargin?: string;
  shapeOutside?: string;
  shapeRendering?: string;
  size?: string;
  speak?: string;
  src?: string;
  stopColor?: string;
  stopOpacity?: string;
  stroke?: string;
  strokeDasharray?: string;
  strokeDashoffset?: string;
  strokeLinecap?: string;
  strokeLinejoin?: string;
  strokeMiterlimit?: string;
  strokeOpacity?: string;
  strokeWidth?: string;
  syntax?: string;
  tabSize?: string;
  tableLayout?: string;
  textAlign?: string;
  textAlignLast?: string;
  textAnchor?: string;
  textCombineUpright?: string;
  textDecoration?: string;
  textDecorationColor?: string;
  textDecorationLine?: string;
  textDecorationSkipInk?: string;
  textDecorationStyle?: string;
  textDecorationThickness?: string;
  textIndent?: string;
  textOrientation?: string;
  textOverflow?: string;
  textRendering?: string;
  textShadow?: string;
  textSizeAdjust?: string;
  textTransform?: string;
  textUnderlineOffset?: string;
  textUnderlinePosition?: string;
  top?: string;
  touchAction?: string;
  transform?: string;
  transformBox?: string;
  transformOrigin?: string;
  transformStyle?: string;
  transition?: string;
  transitionDelay?: string;
  transitionDuration?: string;
  transitionProperty?: string;
  transitionTimingFunction?: string;
  unicodeBidi?: string;
  unicodeRange?: string;
  userSelect?: string;
  userZoom?: string;
  vectorEffect?: string;
  verticalAlign?: string;
  visibility?: string;
  webkitAlignContent?: string;
  webkitAlignItems?: string;
  webkitAlignSelf?: string;
  webkitAnimation?: string;
  webkitAnimationDelay?: string;
  webkitAnimationDirection?: string;
  webkitAnimationDuration?: string;
  webkitAnimationFillMode?: string;
  webkitAnimationIterationCount?: string;
  webkitAnimationName?: string;
  webkitAnimationPlayState?: string;
  webkitAnimationTimingFunction?: string;
  webkitAppRegion?: string;
  webkitAppearance?: string;
  webkitBackfaceVisibility?: string;
  webkitBackgroundClip?: string;
  webkitBackgroundOrigin?: string;
  webkitBackgroundSize?: string;
  webkitBorderAfter?: string;
  webkitBorderAfterColor?: string;
  webkitBorderAfterStyle?: string;
  webkitBorderAfterWidth?: string;
  webkitBorderBefore?: string;
  webkitBorderBeforeColor?: string;
  webkitBorderBeforeStyle?: string;
  webkitBorderBeforeWidth?: string;
  webkitBorderBottomLeftRadius?: string;
  webkitBorderBottomRightRadius?: string;
  webkitBorderEnd?: string;
  webkitBorderEndColor?: string;
  webkitBorderEndStyle?: string;
  webkitBorderEndWidth?: string;
  webkitBorderHorizontalSpacing?: string;
  webkitBorderImage?: string;
  webkitBorderRadius?: string;
  webkitBorderStart?: string;
  webkitBorderStartColor?: string;
  webkitBorderStartStyle?: string;
  webkitBorderStartWidth?: string;
  webkitBorderTopLeftRadius?: string;
  webkitBorderTopRightRadius?: string;
  webkitBorderVerticalSpacing?: string;
  webkitBoxAlign?: string;
  webkitBoxDecorationBreak?: string;
  webkitBoxDirection?: string;
  webkitBoxFlex?: string;
  webkitBoxOrdinalGroup?: string;
  webkitBoxOrient?: string;
  webkitBoxPack?: string;
  webkitBoxReflect?: string;
  webkitBoxShadow?: string;
  webkitBoxSizing?: string;
  webkitClipPath?: string;
  webkitColumnBreakAfter?: string;
  webkitColumnBreakBefore?: string;
  webkitColumnBreakInside?: string;
  webkitColumnCount?: string;
  webkitColumnGap?: string;
  webkitColumnRule?: string;
  webkitColumnRuleColor?: string;
  webkitColumnRuleStyle?: string;
  webkitColumnRuleWidth?: string;
  webkitColumnSpan?: string;
  webkitColumnWidth?: string;
  webkitColumns?: string;
  webkitFilter?: string;
  webkitFlex?: string;
  webkitFlexBasis?: string;
  webkitFlexDirection?: string;
  webkitFlexFlow?: string;
  webkitFlexGrow?: string;
  webkitFlexShrink?: string;
  webkitFlexWrap?: string;
  webkitFontFeatureSettings?: string;
  webkitFontSmoothing?: string;
  webkitHighlight?: string;
  webkitHyphenateCharacter?: string;
  webkitJustifyContent?: string;
  webkitLineBreak?: string;
  webkitLineClamp?: string;
  webkitLocale?: string;
  webkitLogicalHeight?: string;
  webkitLogicalWidth?: string;
  webkitMarginAfter?: string;
  webkitMarginBefore?: string;
  webkitMarginEnd?: string;
  webkitMarginStart?: string;
  webkitMask?: string;
  webkitMaskBoxImage?: string;
  webkitMaskBoxImageOutset?: string;
  webkitMaskBoxImageRepeat?: string;
  webkitMaskBoxImageSlice?: string;
  webkitMaskBoxImageSource?: string;
  webkitMaskBoxImageWidth?: string;
  webkitMaskClip?: string;
  webkitMaskComposite?: string;
  webkitMaskImage?: string;
  webkitMaskOrigin?: string;
  webkitMaskPosition?: string;
  webkitMaskPositionX?: string;
  webkitMaskPositionY?: string;
  webkitMaskRepeat?: string;
  webkitMaskRepeatX?: string;
  webkitMaskRepeatY?: string;
  webkitMaskSize?: string;
  webkitMaxLogicalHeight?: string;
  webkitMaxLogicalWidth?: string;
  webkitMinLogicalHeight?: string;
  webkitMinLogicalWidth?: string;
  webkitOpacity?: string;
  webkitOrder?: string;
  webkitPaddingAfter?: string;
  webkitPaddingBefore?: string;
  webkitPaddingEnd?: string;
  webkitPaddingStart?: string;
  webkitPerspective?: string;
  webkitPerspectiveOrigin?: string;
  webkitPerspectiveOriginX?: string;
  webkitPerspectiveOriginY?: string;
  webkitPrintColorAdjust?: string;
  webkitRtlOrdering?: string;
  webkitRubyPosition?: string;
  webkitShapeImageThreshold?: string;
  webkitShapeMargin?: string;
  webkitShapeOutside?: string;
  webkitTapHighlightColor?: string;
  webkitTextCombine?: string;
  webkitTextDecorationsInEffect?: string;
  webkitTextEmphasis?: string;
  webkitTextEmphasisColor?: string;
  webkitTextEmphasisPosition?: string;
  webkitTextEmphasisStyle?: string;
  webkitTextFillColor?: string;
  webkitTextOrientation?: string;
  webkitTextSecurity?: string;
  webkitTextSizeAdjust?: string;
  webkitTextStroke?: string;
  webkitTextStrokeColor?: string;
  webkitTextStrokeWidth?: string;
  webkitTransform?: string;
  webkitTransformOrigin?: string;
  webkitTransformOriginX?: string;
  webkitTransformOriginY?: string;
  webkitTransformOriginZ?: string;
  webkitTransformStyle?: string;
  webkitTransition?: string;
  webkitTransitionDelay?: string;
  webkitTransitionDuration?: string;
  webkitTransitionProperty?: string;
  webkitTransitionTimingFunction?: string;
  webkitUserDrag?: string;
  webkitUserModify?: string;
  webkitUserSelect?: string;
  webkitWritingMode?: string;
  whiteSpace?: string;
  widows?: string;
  width?: string;
  willChange?: string;
  wordBreak?: string;
  wordSpacing?: string;
  wordWrap?: string;
  writingMode?: string;
  x?: string;
  y?: string;
  zIndex?: string;
  zoom?: string;
}
